# Based on Boost.Hana configuration
# Copyright Louis Dionne 2013-2017
# Distributed under the Boost Software License, Version 1.0.

language: c++
sudo: false


addons:
  apt:
    packages:
      - valgrind
      - g++-6
      - g++-7
    sources: &sources
      - ubuntu-toolchain-r-test


cache:
  directories:
    - ${TRAVIS_BUILD_DIR}/deps/llvm-5.0.0
    - ${TRAVIS_BUILD_DIR}/deps/boost-1.63.0


matrix:
  include:
    ##########################################################################
    # Check for code formatting errors
    ##########################################################################
    - os: osx
      env: CHECK_FORMATTING=true
      osx_image: xcode9

    ##########################################################################
    # Build with the main configuration on all the supported compilers
    #
    # Note that we only use the memory checker on the main configuration to
    # speed up Travis builds.
    ##########################################################################
    # Clang 5.0
    - os: linux
      env: UNIT_TESTS=true LLVM_VERSION=5.0.0 BOOST_VERSION=default ENABLE_MEMCHECK=true
      compiler: clang

    # GCC 6
    - os: linux
      env: UNIT_TESTS=true COMPILER=g++-6     BOOST_VERSION=default ENABLE_MEMCHECK=true
      compiler: gcc

    # GCC 7
    - os: linux
      env: UNIT_TESTS=true COMPILER=g++-7     BOOST_VERSION=default ENABLE_MEMCHECK=true
      compiler: gcc

    # Xcode 9
    - os: osx
      env: UNIT_TESTS=true BOOST_VERSION=default
      osx_image: xcode9

    ##########################################################################
    # Build with variations in the configuration
    ##########################################################################
    # Without Boost (make sure we don't depend on it)
    - os: linux
      env: UNIT_TESTS=true LLVM_VERSION=default
      compiler: clang


install:
  ############################################################################
  # All the dependencies are installed in ${TRAVIS_BUILD_DIR}/deps/
  ############################################################################
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}

  ############################################################################
  # Setup default versions and override compiler if needed
  ############################################################################
  - if [[ "${LLVM_VERSION}" == "default" ]]; then LLVM_VERSION=5.0.0; fi
  - if [[ "${BOOST_VERSION}" == "default" ]]; then BOOST_VERSION=1.63.0; fi

  - if [[ "${COMPILER}" != "" ]]; then export CXX=${COMPILER}; fi

  # # ############################################################################
  # # # Install Boost headers
  # # ############################################################################
  - |
    if [[ "${BOOST_VERSION}" != "" ]]; then
      BOOST_DIR=${DEPS_DIR}/boost-${BOOST_VERSION}
      if [[ -z "$(ls -A ${BOOST_DIR})" ]]; then
        if [[ "${BOOST_VERSION}" == "trunk" ]]; then
          BOOST_URL="http://github.com/boostorg/boost.git"
          travis_retry git clone --depth 1 --recursive ${BOOST_URL} ${BOOST_DIR} || exit 1
          (cd ${BOOST_DIR} && ./bootstrap.sh && ./b2 headers) || exit 1
        else
          BOOST_URL="http://sourceforge.net/projects/boost/files/boost/${BOOST_VERSION}/boost_${BOOST_VERSION//\./_}.tar.gz"
          mkdir -p ${BOOST_DIR}
          { travis_retry wget -O - ${BOOST_URL} | tar --strip-components=1 -xz -C ${BOOST_DIR}; } || exit 1
        fi
        # Make sure we don't conflict with the Hana shipped with Boost
        rm -rf ${BOOST_DIR}/include/boost/{hana,hana.hpp} || exit 1
      fi
      CMAKE_OPTIONS+=" -DBOOST_ROOT=${BOOST_DIR}"
    fi

  ############################################################################
  # Install a recent CMake
  ############################################################################
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      CMAKE_URL="https://cmake.org/files/v3.8/cmake-3.8.0-Linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
    else
      brew upgrade cmake || brew install cmake
    fi
  - cmake --version

  ############################################################################
  # Install Clang, libc++ and libc++abi
  ############################################################################
  - |
    if [[ "${LLVM_VERSION}" != "" ]]; then
      LLVM_DIR=${DEPS_DIR}/llvm-${LLVM_VERSION}
      if [[ -z "$(ls -A ${LLVM_DIR})" ]]; then
        LLVM_URL="http://llvm.org/releases/${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz"
        LIBCXX_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz"
        LIBCXXABI_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz"
        CLANG_URL="http://llvm.org/releases/${LLVM_VERSION}/clang+llvm-${LLVM_VERSION}-x86_64-linux-gnu-ubuntu-14.04.tar.xz"

        mkdir -p ${LLVM_DIR} ${LLVM_DIR}/build ${LLVM_DIR}/projects/libcxx ${LLVM_DIR}/projects/libcxxabi ${LLVM_DIR}/clang
        travis_retry wget --quiet -O - ${LLVM_URL}      | tar --strip-components=1 -xJ -C ${LLVM_DIR}
        travis_retry wget --quiet -O - ${LIBCXX_URL}    | tar --strip-components=1 -xJ -C ${LLVM_DIR}/projects/libcxx
        travis_retry wget --quiet -O - ${LIBCXXABI_URL} | tar --strip-components=1 -xJ -C ${LLVM_DIR}/projects/libcxxabi
        travis_retry wget --quiet -O - ${CLANG_URL}     | tar --strip-components=1 -xJ -C ${LLVM_DIR}/clang
        (cd ${LLVM_DIR}/build && cmake .. -DCMAKE_INSTALL_PREFIX=${LLVM_DIR}/install -DCMAKE_CXX_COMPILER=clang++)
        (cd ${LLVM_DIR}/build/projects/libcxx && make install -j2)
        (cd ${LLVM_DIR}/build/projects/libcxxabi && make install -j2)
      fi

      export CXXFLAGS="-nostdinc++ -isystem ${LLVM_DIR}/install/include/c++/v1"
      export LDFLAGS="-L ${LLVM_DIR}/install/lib -l c++ -l c++abi"
      export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${LLVM_DIR}/install/lib"
      export PATH="${LLVM_DIR}/clang/bin:${PATH}"
    fi
  - ${CXX} --version

  ############################################################################
  # Install tools to check for code formatting errors (run on OS X only)
  ############################################################################
  - |
    if [[ "${CHECK_FORMATTING}" == "true" ]]; then
      brew upgrade pcre || brew install pcre || exit 1
      brew upgrade vera++ || brew install vera++ || exit 1
    fi


before_script:
  ############################################################################
  # Set the git identity (for pushing the documentation and the benchmarks)
  ############################################################################
  - git config --global user.name "Travis bot"
  - git config --global user.email "<>"

  ############################################################################
  # Go back to the root of the project and setup the build directory
  ############################################################################
  - cd ${TRAVIS_BUILD_DIR}
  - (mkdir build && cd build && cmake .. ${CMAKE_OPTIONS})


script:
  ############################################################################
  # Check for common formatting errors.
  ############################################################################
  - |
    if [[ "${CHECK_FORMATTING}" == "true" ]]; then
      # Find non-ASCII characters in headers
      hpps=$(find include -name \*\.hpp)
      cpps=$(find src test -name \*\.cpp)
      pcregrep --color='auto' -n "[\x80-\xFF]" ${hpps} ${cpps}
      if [[ $? -ne 1 ]]; then exit 1; fi

      # F001: Source files should not use the '\r' (CR) character
      # L001: No trailing whitespace at the end of lines
      # L002: Don't use tab characters
      find include -name \*\.hpp | vera++ --rule F001 --rule L001 --rule L002 --error
    fi

  ############################################################################
  # Build and run the unit tests and examples.
  ############################################################################
  - |
    if [[ "${UNIT_TESTS}" == "true" ]]; then
      (cd build && make tests -j2 -k) &&
      if [[ "${ENABLE_MEMCHECK}" == "true" ]]; then
        (cd build && ctest --output-on-failure -j2 -D ExperimentalMemCheck)
      else
        (cd build && ctest --output-on-failure -j2)
      fi
    fi
